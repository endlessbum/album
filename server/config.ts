import dotenv from 'dotenv';

const isTest = process.env.NODE_ENV === 'test';

// –í —é–Ω–∏—Ç-—Ç–µ—Å—Ç–∞—Ö –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É .env, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ë–î
if (isTest) {
  if (process.env.DATABASE_URL) delete process.env.DATABASE_URL;
  console.warn('üß™ Tests: skipping .env load; DATABASE_URL disabled');
} else {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ, –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ
  const result = dotenv.config({ override: false });
  const maskUrl = (url?: string) => {
    if (!url) return '‚ùå Missing';
    try {
      const u = new URL(url);
      const user = u.username ? (u.username.length > 2 ? u.username.slice(0, 2) + '***' : '***') : '';
      const host = u.hostname;
      const db = u.pathname?.slice(1) || '';
      return `${u.protocol}//${user}:${'***'}@${host}/${db}`;
    } catch {
      return (url ?? '').slice(0, 20) + '...';
    }
  };

  if (result.error) {
    // –ï—Å–ª–∏ .env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (ENOENT) ‚Äî –Ω–µ –ø–∞–¥–∞–µ–º: –≤ –ø—Ä–æ–¥–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    const code = (result.error as any)?.code;
    if (code === 'ENOENT') {
      console.warn('‚ÑπÔ∏è .env not found; using platform environment variables only');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env:', result.error);
    }
  } else {
    console.warn('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env');
  }

  console.warn(`üìä DATABASE_URL: ${maskUrl(process.env.DATABASE_URL)}`);
  console.warn(`üìä PORT: ${process.env.PORT || 'Using default'}`);
}

export {};
